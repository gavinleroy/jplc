(executable
 (name jplc)
 (modules jplc)
 (libraries
   ;; libraries for using MetaOCaml
   dynlink metaocaml
   parsing utils compiler)
 (preprocess (pps ppx_jane))
 (modes exe))

;; while trying to untie the libraries from the core_kernal
;; dep simply ignore the 'jir' and 'codegen' libs until I
;; get to them.
;; Full LLVM support wasn't ready anyways
(dirs :standard \ jir codegen)

(library
 (name compiler)
 (modules compiler)
 (libraries
   ;; ocaml libs
   cmdliner ANSITerminal

   ;; my libs
   utils

   ;; Parsing library to create the initial AST
   parsing

   ;; Typing library to transform a parse AST to a type AST
   typing

   ;; Staged Intepreter library for porting JPL to MetaOCaml
   ;; staged-interp

   ;; Optimizing librar to come XXX
   ;; this will most likely be easier at some other level of IR (LLVM or custom)

   ;; the new CFG based IR for a simpler LLVM transformation
   ;; jir

   ;; Flatten the type AST to a SSA module of all functions (top level included in `main`)
   ; flattening

   ;; Code Generation library to take a flattened AST and transorm this into LLVM IR
   ;; XXX additional optimizations should be done here (e.g. vectorization, ...)
   ;; codegen
   )
 (preprocess (pps ppx_jane)))
